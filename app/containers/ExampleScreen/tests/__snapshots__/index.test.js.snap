// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<ExampleScreen /> Should render and match the snapshot 1`] = `
<View
  pointerEvents="box-none"
  style={
    Object {
      "flex": 1,
    }
  }
>
  <View
    collapsable={true}
    pointerEvents="box-none"
    style={
      Object {
        "flex": 1,
      }
    }
  >
    <View
      style={
        Array [
          Object {
            "display": "flex",
            "flexBasis": 0,
            "flexGrow": 1,
            "flexShrink": 1,
          },
          Object {
            "flexBasis": 0,
            "flexGrow": 1,
            "flexShrink": 1,
            "justifyContent": "center",
            "marginBottom": 30,
            "marginLeft": 30,
            "marginRight": 30,
            "marginTop": 30,
          },
        ]
      }
      testID="container"
    >
      <View
        testID="example-container-content"
      >
        <View
          style={
            Array [
              Object {
                "height": 150,
                "marginBottom": 25,
                "width": "100%",
              },
            ]
          }
        >
          <Image
            resizeMode="contain"
            source={
              Object {
                "testUri": "../../../app/assets/images/logo.png",
              }
            }
            style={
              Array [
                Object {
                  "height": "100%",
                  "width": "100%",
                },
              ]
            }
          />
        </View>
        <Text
          style={
            Array [
              Object {
                "fontSize": 17,
                "fontWeight": "normal",
                "marginBottom": 5,
                "textAlign": "center",
              },
            ]
          }
        >
          To get started, edit App.js
        </Text>
        <Text
          style={
            Array [
              Object {
                "fontSize": 17,
                "fontStyle": "italic",
                "fontWeight": "normal",
                "marginBottom": 5,
                "textAlign": "center",
              },
            ]
          }
        >
          Press Cmd+R to reload,
Cmd+D or shake for dev menu.
        </Text>
        <View
          style={
            Array [
              Object {},
            ]
          }
        >
          <Text
            style={
              Array [
                Object {
                  "fontSize": 17,
                  "fontWeight": "normal",
                  "marginBottom": 5,
                  "textAlign": "center",
                },
              ]
            }
          >
            <Text
              testID="t"
            >
              character loves Wednesday
            </Text>
          </Text>
          <Text
            style={
              Array [
                Object {
                  "fontSize": 17,
                  "fontWeight": "normal",
                  "marginBottom": 5,
                  "textAlign": "center",
                },
              ]
            }
          >
            <Text
              testID="t"
            >
              because
            </Text>
          </Text>
          <Image
            resizeMode="contain"
            source={
              Object {
                "uri": undefined,
              }
            }
            style={
              Array [
                Object {
                  "height": 80,
                  "marginBottom": 0,
                  "marginLeft": "auto",
                  "marginRight": "auto",
                  "marginTop": 0,
                  "width": 80,
                },
              ]
            }
          />
          <Text
            style={
              Array [
                Object {
                  "fontSize": 17,
                  "fontWeight": "normal",
                  "marginBottom": 5,
                  "textAlign": "center",
                },
              ]
            }
          />
        </View>
        <Button
          style={
            Array [
              Object {
                "marginTop": 40,
              },
            ]
          }
          title="Refresh"
        />
      </View>
    </View>
  </View>
  <View
    style={
      Object {
        "bottom": 0,
        "position": "absolute",
        "width": "100%",
      }
    }
  >
    <View
      pointerEvents="box-none"
      style={
        Object {
          "bottom": "100%",
          "flexDirection": "row",
          "justifyContent": "flex-end",
          "paddingBottom": 4,
          "paddingEnd": 4,
          "position": "absolute",
          "width": "100%",
        }
      }
    >
      <TouchableWithoutFeedback
        hitSlop={
          Object {
            "bottom": 4,
            "left": 4,
            "right": 4,
            "top": 4,
          }
        }
      >
        <View
          style={
            Array [
              Object {
                "backgroundColor": "rgba(250, 186, 48, 0.95)",
              },
              Object {
                "borderRadius": 14,
                "height": 28,
                "justifyContent": "center",
                "paddingHorizontal": 12,
              },
            ]
          }
        >
          <Text
            numberOfLines={1}
            style={
              Object {
                "color": "rgba(255, 255, 255, 1)",
                "fontSize": 12,
                "includeFontPadding": false,
                "lineHeight": 16,
              }
            }
          >
            Dismiss All
          </Text>
        </View>
      </TouchableWithoutFeedback>
    </View>
    <ScrollView
      data={
        Array [
          Object {
            "category": "Node of type rule not supported as an inline style",
            "warnings": Array [
              YellowBoxWarning {
                "message": Object {
                  "content": "Node of type rule not supported as an inline style",
                  "substitutions": Array [],
                },
                "stack": Array [
                  Object {
                    "arguments": Array [],
                    "column": 21,
                    "file": "/Users/mac/wednesday/react-native-boilerplate/node_modules/styled-components/native/dist/styled-components.native.cjs.js",
                    "lineNumber": 5938,
                    "methodName": "warn",
                  },
                  Object {
                    "arguments": Array [],
                    "column": 16,
                    "file": "/Users/mac/wednesday/react-native-boilerplate/node_modules/styled-components/native/dist/styled-components.native.cjs.js",
                    "lineNumber": 3585,
                    "methodName": "Root.callback [as each]",
                  },
                  Object {
                    "arguments": Array [],
                    "column": 14,
                    "file": "/Users/mac/wednesday/react-native-boilerplate/node_modules/styled-components/native/dist/styled-components.native.cjs.js",
                    "lineNumber": 5933,
                    "methodName": "InlineStyle.each [as generateStyleObject]",
                  },
                  Object {
                    "arguments": Array [],
                    "column": 24,
                    "file": "/Users/mac/wednesday/react-native-boilerplate/node_modules/styled-components/native/dist/styled-components.native.cjs.js",
                    "lineNumber": 6304,
                    "methodName": "StyledNativeComponent.generateStyleObject [as generateAndInjectStyles]",
                  },
                  Object {
                    "arguments": Array [],
                    "column": 38,
                    "file": "/Users/mac/wednesday/react-native-boilerplate/node_modules/styled-components/native/dist/styled-components.native.cjs.js",
                    "lineNumber": 6233,
                    "methodName": "generateAndInjectStyles",
                  },
                ],
                "symbolicated": Object {
                  "error": null,
                  "stack": null,
                  "status": "NONE",
                },
              },
            ],
          },
        ]
      }
      disableVirtualization={false}
      horizontal={false}
      initialNumToRender={10}
      maxToRenderPerBatch={10}
      numColumns={1}
      onEndReachedThreshold={2}
      removeClippedSubviews={false}
      scrollEnabled={false}
      scrollEventThrottle={50}
      scrollsToTop={false}
      stickyHeaderIndices={Array []}
      style={
        Object {
          "height": 48.5,
        }
      }
      updateCellsBatchingPeriod={50}
      viewabilityConfigCallbackPairs={Array []}
      windowSize={21}
    >
      <View
        style={null}
      >
        <TouchableWithoutFeedback>
          <View
            style={
              Array [
                Object {
                  "backgroundColor": "rgba(250, 186, 48, 0.95)",
                },
                Object {
                  "height": 48,
                  "justifyContent": "center",
                  "marginTop": 0.5,
                  "paddingHorizontal": 12,
                },
              ]
            }
          >
            <View
              style={
                Object {
                  "alignItems": "flex-start",
                  "flexDirection": "row",
                }
              }
            >
              <Text
                numberOfLines={2}
                style={
                  Object {
                    "color": "rgba(255, 255, 255, 1)",
                    "flex": 1,
                    "fontSize": 14,
                    "includeFontPadding": false,
                    "lineHeight": 18,
                  }
                }
              >
                <Text>
                  Node of type rule not supported as an inline style
                </Text>
              </Text>
            </View>
          </View>
        </TouchableWithoutFeedback>
      </View>
    </ScrollView>
    <SafeAreaView
      style={
        Object {
          "backgroundColor": "rgba(250, 186, 48, 0.95)",
          "marginTop": 0.5,
        }
      }
    />
  </View>
</View>
`;
